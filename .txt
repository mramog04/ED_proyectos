public String toString() {//NO ESTA ACABADO
		// TODO implementar este metodo
		// CONSEJO: Hay que reciclar la implementación del método de la clase AbstractTreeADT, 
		// añadiendo el código necesario para poner detrás del content entre paréntesis el count
		// solo si éste es mayor que 1.
		// Código que añade el content: result.append("{" + content.toString());
		
		if (! isEmpty()) {
			//	Construye el resultado de forma eficiente
			StringBuffer result = new StringBuffer();
				
			//	Raíz
			result.append("{" + content.toString());

			if(this.count>1){
				result.append("("+count+")");
			}
			
			if (! tags.isEmpty()) {
				result.append(" [");
				
				List<String> sk = new LinkedList<String>(tags.keySet());
				
				Collections.sort(sk);
				for (String k : sk) {
					result.append("(" + k + ", " + tags.get(k) + "), ");
				}
				result.delete(result.length() - 2, result.length());
				result.append("]");
			}
			
			//	Y cada sub-árbol
			for (int i = 0; i < getMaxDegree(); i++) {
				result.append(", " + getSubtree(i).toString());
			}
			//	Cierra la "}" de este árbol
			result.append("}");
			
			return result.toString();
		} else {
			return AbstractTreeADT.EMPTY_TREE_MARK;
		}
		
	}